NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME : dataTypeModule.f90

  COMPILER OPTIONS : -fopenmp -O3 -proginf -report-all -finline-functions -fpp -c

  PARAMETER : 

      Optimization Options : 
        -On                                      : 3
        -fargument-alias                         : disable
        -fargument-noalias                       : enable
        -fassociative-math                       : enable
        -faggressive-associative-math            : disable
        -fassume-contiguous                      : disable
        -fcopyin-intent-out                      : enable
        -fcse-after-vectorization                : disable
        -ffast-formatted-io                      : enable
        -ffast-math                              : enable
        -fignore-asynchronous                    : disable
        -fignore-volatile                        : disable
        -fivdep                                  : disable
        -floop-collapse                          : enable
        -floop-count                             : 5000
        -floop-fusion                            : enable
        -floop-interchange                       : enable
        -floop-normalize                         : enable
        -floop-split                             : disable
        -floop-strip-mine                        : enable
        -floop-unroll                            : enable
        -floop-unroll-completely                 : 4
        -floop-unroll-completely-nest            : 3
        -floop-unroll-max-times                  : auto
        -fmatrix-multiply                        : enable
        -fmove-loop-invariants                   : enable
        -fmove-loop-invariants-if                : enable
        -fmove-loop-invariants-unsafe            : disable
        -fmove-nested-loop-invariants-outer      : enable
        -fnamed-alias                            : disable
        -fnamed-noalias                          : enable
        -fnamed-noalias-aggressive               : disable
        -fouterloop-unroll                       : enable
        -fouterloop-unroll-max-size              : 4
        -fouterloop-unroll-max-times             : 4
        -fprecise-math                           : disable
        -freciprocal-math                        : enable
        -freorder-logical-expression             : enable
        -freplace-loop-equation                  : disable
        -marray-io                               : enable
        -mlist-vector                            : disable
        -mretain-all                             : enable
        -mretain-list-vector                     : disable
        -mretain-none                            : disable
        -msched-none                             : disable
        -msched-insns                            : enable
        -msched-block                            : disable
        -mstack-arrays                           : enable
        -mno-stack-arrays                        : disable
        -mvector                                 : enable
        -mvector-advance-gather                  : enable
        -mvector-advance-gather-limit            : 56
        -mvector-dependency-test                 : enable
        -mvector-floating-divide-instruction     : disable
        -mvector-fma                             : enable
        -mvector-intrinsic-check                 : disable
        -mvector-iteration                       : enable
        -mvector-iteration-unsafe                : enable
        -mvector-loop-count-test                 : disable
        -mvector-low-precise-divide-function     : disable
        -mvector-merge-conditional               : enable
        -mvector-packed                          : disable
        -mvector-power-to-explog                 : disable
        -mvector-power-to-sqrt                   : enable
        -mvector-reduction                       : enable
        -mvector-shortloop-reduction             : disable
        -mvector-sqrt-instruction                : disable
        -mvector-threshold                       : 5
        -mwork-vector-kind=none                  : disable

      Parallelization Options : 
        -fopenmp                                 : enable
        -mparallel                               : disable
        -mparallel-innerloop                     : disable
        -mparallel-omp-routine                   : enable
        -mparallel-outerloop-strip-mine          : disable
        -mparallel-sections                      : disable
        -mparallel-threshold                     : 2000
        -mschedule-dynamic                       : disable
        -mschedule-runtime                       : disable
        -mschedule-static                        : disable
        -mschedule-chunk-size                    : 0
        -pthread                                 : disable

      Inlining Options : 
        -finline-copy-arguments                  : enable
        -finline-functions                       : enable
        -finline-max-depth                       : 2
        -finline-max-function-size               : 50
        -finline-max-times                       : 6

      Code Generation Options : 
        -finstrument-functions                   : disable
        -fpic | -fPIC                            : disable
        -ftrace                                  : disable
        -p                                       : disable

      Debugging Options : 
        -fbounds-check                           : disable
        -fcheck=all                              : disable
        -fcheck=alias                            : disable
        -fcheck=bits                             : disable
        -fcheck=bounds                           : disable
        -fcheck=dangling                         : disable
        -fcheck=do                               : disable
        -fcheck=iovf                             : disable
        -fcheck=pointer                          : disable
        -fcheck=present                          : disable
        -fcheck=recursion                        : disable
        -g                                       : disable
        -minit-stack                             : not specified
        -mmemory-trace                           : disable
        -mmemory-trace-full                      : disable
        -traceback                               : disable

      Language Options : 
        -bss                                     : disable
        -fdefault-integer                        : 4
        -fdefault-double                         : 8
        -fdefault-real                           : 4
        -fextend-source                          : disable
        -ffree-form                              : enable
        -ffixed-form                             : disable
        -ff90-sign                               : disable
        -fmax-continuation-lines                 : 1023
        -frealloc-lhs                            : enable
        -frealloc-lhs-array                      : enable
        -frealloc-lhs-scalar                     : enable
        -save                                    : disable
        -std                                     : Fortran 2008

      Message Options : 
        -Wall                                    : disable
        -Werror                                  : disable
        -Wextension                              : enable
        -Wobsolescent                            : enable
        -Woverflow                               : disable
        -Woverflow-errors                        : disable
        -fdiag-inline                            : 1
        -fdiag-parallel                          : 1
        -fdiag-vector                            : 1
        -pedantic-errors                         : disable
        -w                                       : disable

      List Output Options : 
        -report-file                             : not specified
        -report-append-mode                      : disable
        -report-all                              : enable
        -report-cg                               : enable
        -report-diagnostics                      : enable
        -report-format                           : enable
        -report-inline                           : enable
        -report-option                           : enable
        -report-vector                           : enable

      Directory Options : 
        -fintrinsic-modules-path                 : /opt/nec/ve/nfort/3.1.1/include
        -module                                  : not specified

      Miscellaneous Options : 
        -v                                       : disable


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAINIT
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAINIT
FORMAT LIST

 LINE   LOOP      STATEMENT

    55:             subroutine blkDataInit(isize,ovlp)
    56:               integer, intent(in) :: isize, ovlp
    57:               blk_idx_max = isize
    58:               blk_idx_ovlp = ovlp
    59:             end subroutine blkDataInit


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAINIT
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAINIT
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAINIT
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         :  7 [s0-s1 s8-s11 s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 0 bytes
      Register spill area      : 0 bytes
      Parameter area           : 0 bytes
      Register save area       : 0 bytes
      User data area           : 0 bytes
      Others                   : 0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

    75: vec( 101): Vectorized loop.
    76: vec( 101): Vectorized loop.
    77: vec( 101): Vectorized loop.
    78: vec( 101): Vectorized loop.
    79: vec( 101): Vectorized loop.
    80: vec( 101): Vectorized loop.
    86: vec( 101): Vectorized loop.
    87: vec( 101): Vectorized loop.
    88: vec( 101): Vectorized loop.
    89: vec( 101): Vectorized loop.
    90: vec( 101): Vectorized loop.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

    61:             subroutine blkDataAllocation(b)
    62:               type(blkDataType), intent(inout) :: b
    63:               integer :: imin,imax
    64:               imin = 1-blk_idx_ovlp
    65:               imax = blk_idx_max + blk_idx_ovlp
    66:               b%dx    = 0.123456789
    67:               b%area = b%dx*b%dx
    68:               b%voli = 1.0d0/(b%area*b%dx)
    69:               allocate(b%rho(imin:imax,imin:imax,imin:imax), &
    70:                        b%u  (imin:imax,imin:imax,imin:imax), &
    71:                        b%v  (imin:imax,imin:imax,imin:imax), &
    72:                        b%w  (imin:imax,imin:imax,imin:imax), &
    73:                        b%pre(imin:imax,imin:imax,imin:imax), &
    74:                        b%vis(imin:imax,imin:imax,imin:imax))
    75: V======>      b%rho = 0.123456789
    76: V======>      b%u   = 0.123456789
    77: V======>      b%v   = 0.123456789
    78: V======>      b%w   = 0.123456789
    79: V======>      b%w   = 0.123456789
    80: V======>      b%vis = 0.123456789
    81:               allocate(b%dmas(imin:imax,imin:imax,imin:imax), &
    82:                        b%dmox(imin:imax,imin:imax,imin:imax), &
    83:                        b%dmoy(imin:imax,imin:imax,imin:imax), &
    84:                        b%dmoz(imin:imax,imin:imax,imin:imax), &
    85:                        b%dene(imin:imax,imin:imax,imin:imax))
    86: V======>      b%dmas = 0.0
    87: V======>      b%dmox = 0.0
    88: V======>      b%dmoy = 0.0
    89: V======>      b%dmoz = 0.0
    90: V======>      b%dene = 0.0
    91:             end subroutine blkDataAllocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAALLOCATION
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (dataTypeModule.f90:75)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:75)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:75)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:76)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:76)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:76)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:77)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:77)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:77)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:78)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:78)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:78)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:79)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:79)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:79)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:80)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:80)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:80)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:86)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:86)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:86)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:87)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:87)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:87)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:88)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:88)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:88)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:89)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:89)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:89)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:90)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:90)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:90)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATAALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 25 [s0-s1 s8-s12 s15-s16 s18 s23-s31 s58-s63]
      Vector registers         : 11 [v53-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 192 bytes
      Register spill area      :   0 bytes
      Parameter area           :  16 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (dataTypeModule.f90:75)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:76)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:77)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:78)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:79)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:80)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:86)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:87)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:88)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:89)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:90)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATADEALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATADEALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

    92:             subroutine blkDataDeallocation(b)
    93:               type(blkDataType), intent(inout) :: b
    94:               deallocate(b%rho,b%u,b%v,b%w,b%pre,b%vis)
    95:               deallocate(b%dmas,b%dmox,b%dmoy,b%dmoz,b%dene)
    96:             end subroutine blkDataDeallocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATADEALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATADEALLOCATION
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::BLKDATADEALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 15 [s0-s2 s8-s12 s15-s16 s18 s23 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  24 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATAALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   113: vec( 101): Vectorized loop.
   114: vec( 101): Vectorized loop.
   115: vec( 101): Vectorized loop.
   116: vec( 101): Vectorized loop.
   117: vec( 101): Vectorized loop.
   118: vec( 101): Vectorized loop.
   119: vec( 101): Vectorized loop.
   120: vec( 101): Vectorized loop.
   121: vec( 101): Vectorized loop.
   122: vec( 101): Vectorized loop.
   128: vec( 101): Vectorized loop.
   129: vec( 101): Vectorized loop.
   130: vec( 101): Vectorized loop.
   131: vec( 101): Vectorized loop.
   132: vec( 101): Vectorized loop.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATAALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

    98:             subroutine cfluxDataAllocation(b)
    99:               type(cfluxDataType), intent(inout) :: b
   100:               integer :: imin,imax
   101:               imin = 1-blk_idx_ovlp
   102:               imax = blk_idx_max + blk_idx_ovlp
   103:               allocate(b%rhoL(imin:imax,imin:imax,imin:imax), &
   104:                        b%uL  (imin:imax,imin:imax,imin:imax), &
   105:                        b%vL  (imin:imax,imin:imax,imin:imax), &
   106:                        b%wL  (imin:imax,imin:imax,imin:imax), &
   107:                        b%preL(imin:imax,imin:imax,imin:imax))
   108:               allocate(b%rhoR(imin:imax,imin:imax,imin:imax), &
   109:                        b%uR  (imin:imax,imin:imax,imin:imax), &
   110:                        b%vR  (imin:imax,imin:imax,imin:imax), &
   111:                        b%wR  (imin:imax,imin:imax,imin:imax), &
   112:                        b%preR(imin:imax,imin:imax,imin:imax))
   113: V======>      b%rhoL = 0.123456789
   114: V======>      b%uL   = 0.0
   115: V======>      b%vL   = 0.0
   116: V======>      b%wL   = 0.0
   117: V======>      b%preL = 0.123456789
   118: V======>      b%rhoR = 0.123456789
   119: V======>      b%uR   = 0.0
   120: V======>      b%vR   = 0.0
   121: V======>      b%wR   = 0.0
   122: V======>      b%preR = 0.123456789
   123:               allocate(b%mass(imin:imax,imin:imax,imin:imax), &
   124:                        b%xmom(imin:imax,imin:imax,imin:imax), &
   125:                        b%ymom(imin:imax,imin:imax,imin:imax), &
   126:                        b%zmom(imin:imax,imin:imax,imin:imax), &
   127:                        b%ene (imin:imax,imin:imax,imin:imax))
   128: V======>      b%mass = 0.0
   129: V======>      b%xmom = 0.0
   130: V======>      b%ymom = 0.0
   131: V======>      b%zmom = 0.0
   132: V======>      b%ene  = 0.0
   133:             end subroutine cfluxDataAllocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATAALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATAALLOCATION
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (dataTypeModule.f90:113)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:113)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:113)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:114)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:114)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:114)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:115)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:115)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:115)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:116)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:116)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:116)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:117)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:117)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:117)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:118)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:118)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:118)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:119)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:119)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:119)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:120)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:120)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:120)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:121)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:121)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:121)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:122)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:122)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:122)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:128)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:128)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:128)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:129)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:129)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:129)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:130)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:130)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:130)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:131)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:131)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:131)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:132)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:132)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:132)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATAALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 27 [s0-s1 s8-s12 s15-s16 s18 s23-s33 s58-s63]
      Vector registers         : 15 [v49-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 192 bytes
      Register spill area      :   0 bytes
      Parameter area           :  16 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (dataTypeModule.f90:113)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:114)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:115)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:116)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:117)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:118)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:119)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:120)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:121)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:122)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:128)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:129)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:130)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:131)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:132)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATADEALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATADEALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

   134:             subroutine cfluxDataDeallocation(b)
   135:               type(cfluxDataType), intent(inout) :: b
   136:               deallocate(b%rhoL,b%uL,b%vL,b%wL,b%preL)
   137:               deallocate(b%rhoR,b%uR,b%vR,b%wR,b%preR)
   138:               deallocate(b%mass,b%xmom,b%ymom,b%zmom,b%ene)
   139:             end subroutine cfluxDataDeallocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATADEALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATADEALLOCATION
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::CFLUXDATADEALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 15 [s0-s2 s8-s12 s15-s16 s18 s23 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  24 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATAALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   162: vec( 101): Vectorized loop.
   163: vec( 101): Vectorized loop.
   164: vec( 101): Vectorized loop.
   165: vec( 101): Vectorized loop.
   166: vec( 101): Vectorized loop.
   167: vec( 101): Vectorized loop.
   168: vec( 101): Vectorized loop.
   169: vec( 101): Vectorized loop.
   170: vec( 101): Vectorized loop.
   171: vec( 101): Vectorized loop.
   172: vec( 101): Vectorized loop.
   173: vec( 101): Vectorized loop.
   174: vec( 101): Vectorized loop.
   175: vec( 101): Vectorized loop.
   176: vec( 101): Vectorized loop.
   177: vec( 101): Vectorized loop.
   183: vec( 101): Vectorized loop.
   184: vec( 101): Vectorized loop.
   185: vec( 101): Vectorized loop.
   186: vec( 101): Vectorized loop.
   187: vec( 101): Vectorized loop.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATAALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

   141:             subroutine vfluxDataAllocation(b)
   142:               type(vfluxDataType), intent(inout) :: b
   143:               integer :: imin,imax
   144:               imin = 1-blk_idx_ovlp
   145:               imax = blk_idx_max + blk_idx_ovlp
   146:               allocate(b%mu(imin:imax,imin:imax,imin:imax), &
   147:                        b%u (imin:imax,imin:imax,imin:imax), &
   148:                        b%v (imin:imax,imin:imax,imin:imax), &
   149:                        b%w (imin:imax,imin:imax,imin:imax), &
   150:                        b%dTdx(imin:imax,imin:imax,imin:imax), &
   151:                        b%dTdy(imin:imax,imin:imax,imin:imax), &
   152:                        b%dTdz(imin:imax,imin:imax,imin:imax), &
   153:                        b%dudx(imin:imax,imin:imax,imin:imax), &
   154:                        b%dudy(imin:imax,imin:imax,imin:imax), &
   155:                        b%dudz(imin:imax,imin:imax,imin:imax), &
   156:                        b%dvdx(imin:imax,imin:imax,imin:imax), &
   157:                        b%dvdy(imin:imax,imin:imax,imin:imax), &
   158:                        b%dvdz(imin:imax,imin:imax,imin:imax), &
   159:                        b%dwdx(imin:imax,imin:imax,imin:imax), &
   160:                        b%dwdy(imin:imax,imin:imax,imin:imax), &
   161:                        b%dwdz(imin:imax,imin:imax,imin:imax))
   162: V======>      b%mu   = 0.0
   163: V======>      b%u    = 0.0
   164: V======>      b%v    = 0.0
   165: V======>      b%w    = 0.0
   166: V======>      b%dTdx = 0.0
   167: V======>      b%dTdy = 0.0
   168: V======>      b%dTdz = 0.0
   169: V======>      b%dudx = 0.0
   170: V======>      b%dudy = 0.0
   171: V======>      b%dudz = 0.0
   172: V======>      b%dvdx = 0.0
   173: V======>      b%dvdy = 0.0
   174: V======>      b%dvdz = 0.0
   175: V======>      b%dwdx = 0.0
   176: V======>      b%dwdy = 0.0
   177: V======>      b%dwdz = 0.0
   178:               allocate(b%mass(imin:imax,imin:imax,imin:imax), &
   179:                        b%xmom(imin:imax,imin:imax,imin:imax), &
   180:                        b%ymom(imin:imax,imin:imax,imin:imax), &
   181:                        b%zmom(imin:imax,imin:imax,imin:imax), &
   182:                        b%ene (imin:imax,imin:imax,imin:imax))
   183: V======>      b%mass = 0.0
   184: V======>      b%xmom = 0.0
   185: V======>      b%ymom = 0.0
   186: V======>      b%zmom = 0.0
   187: V======>      b%ene  = 0.0
   188:             end subroutine vfluxDataAllocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATAALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATAALLOCATION
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (dataTypeModule.f90:162)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:162)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:162)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:163)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:163)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:163)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:164)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:164)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:164)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:165)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:165)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:165)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:166)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:166)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:166)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:167)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:167)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:167)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:168)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:168)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:168)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:169)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:169)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:169)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:170)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:170)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:170)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:171)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:171)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:171)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:172)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:172)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:172)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:173)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:173)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:173)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:174)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:174)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:174)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:175)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:175)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:175)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:176)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:176)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:176)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:177)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:177)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:177)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:183)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:183)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:183)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:184)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:184)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:184)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:185)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:185)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:185)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:186)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:186)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:186)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:187)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:187)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:187)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATAALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 27 [s0-s1 s8-s12 s15-s16 s18 s23-s33 s58-s63]
      Vector registers         : 21 [v43-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 192 bytes
      Register spill area      :   0 bytes
      Parameter area           :  16 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (dataTypeModule.f90:162)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:163)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:164)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:165)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:166)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:167)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:168)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:169)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:170)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:171)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:172)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:173)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:174)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:175)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:176)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:177)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:183)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:184)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:185)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:186)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:187)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATADEALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATADEALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

   189:             subroutine vfluxDataDeallocation(b)
   190:               type(vfluxDataType), intent(inout) :: b
   191:               deallocate(b%mu,b%u,b%v,b%w)
   192:               deallocate(b%dTdx,b%dTdy,b%dTdz)
   193:               deallocate(b%dudx,b%dudy,b%dudz,&
   194:                          b%dvdx,b%dvdy,b%dvdz,&
   195:                          b%dwdx,b%dwdy,b%dwdz )
   196:               deallocate(b%mass,b%xmom,b%ymom,b%zmom,b%ene)
   197:             end subroutine vfluxDataDeallocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATADEALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATADEALLOCATION
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::VFLUXDATADEALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 15 [s0-s2 s8-s12 s15-s16 s18 s23 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  24 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATAALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   209: vec( 101): Vectorized loop.
   210: vec( 101): Vectorized loop.
   211: vec( 101): Vectorized loop.
   212: vec( 101): Vectorized loop.
   213: vec( 101): Vectorized loop.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATAALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

   199:             subroutine fluxDataAllocation(b)
   200:               type(fluxDataType), intent(inout) :: b
   201:               integer :: imin,imax
   202:               imin = 1-blk_idx_ovlp
   203:               imax = blk_idx_max + blk_idx_ovlp
   204:               allocate(b%mass(imin:imax,imin:imax,imin:imax), &
   205:                        b%xmom(imin:imax,imin:imax,imin:imax), &
   206:                        b%ymom(imin:imax,imin:imax,imin:imax), &
   207:                        b%zmom(imin:imax,imin:imax,imin:imax), &
   208:                        b%ene (imin:imax,imin:imax,imin:imax))
   209: V======>      b%mass = 0.0
   210: V======>      b%xmom = 0.0
   211: V======>      b%ymom = 0.0
   212: V======>      b%zmom = 0.0
   213: V======>      b%ene  = 0.0
   214:             end subroutine fluxDataAllocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATAALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATAALLOCATION
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (dataTypeModule.f90:209)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:209)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:209)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:210)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:210)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:210)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:211)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:211)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:211)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:212)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:212)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:212)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:213)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (dataTypeModule.f90:213)
    *** The number of VLOAD, VSTORE. :  0,  1. (dataTypeModule.f90:213)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATAALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 25 [s0-s1 s8-s12 s15-s16 s18 s23-s31 s58-s63]
      Vector registers         :  5 [v59-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 192 bytes
      Register spill area      :   0 bytes
      Parameter area           :  16 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (dataTypeModule.f90:209)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:210)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:211)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:212)
  LOOP END

  LOOP BEGIN: (dataTypeModule.f90:213)
  LOOP END


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATADEALLOCATION
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATADEALLOCATION
FORMAT LIST

 LINE   LOOP      STATEMENT

   215:             subroutine fluxDataDeallocation(b)
   216:               type(fluxDataType), intent(inout) :: b
   217:               deallocate(b%mass,b%xmom,b%ymom,b%zmom,b%ene)
   218:             end subroutine fluxDataDeallocation


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATADEALLOCATION
INLINE LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATADEALLOCATION
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (3.1.1) for Vector Engine   Wed Jan  6 15:37:42 2021
FILE NAME: dataTypeModule.f90

PROCEDURE NAME: DATATYPE::FLUXDATADEALLOCATION
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 15 [s0-s2 s8-s12 s15-s16 s18 s23 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  24 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


